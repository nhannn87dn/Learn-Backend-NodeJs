import createError from 'http-errors';
import Customer from '../models/customer.model';
import { ICustomer } from '../types/models';
//Tra lai ket qua
const getAll = async (query: any)=>{
    //Ph√¢n trang
    const currentPage = query &&  query.page ? parseInt(query.page as string) : 1; //trang hi·ªán t·∫°i
    const pageSize = query &&  query.limit ? parseInt(query.limit as string) : 5; // S·ªë l∆∞·ª£ng items tr√™n 1 trang

    //S·∫Øp x·∫øp t√πy ch·ªçn theo tr∆∞·ªùng
    let sortObject : any = {}; //M·∫∑c ƒë·ªãnh theo tr∆∞·ªùng sort ASC
    const sortBy = query &&  query.sortBy ? query.sortBy : 'sort'
    const sortType = query &&  query.sortType && query.sortType === "DESC" ? -1 : 1;
    //Th√™m ph·∫ßn t·ª≠ v·∫£o object r·ªóng
    sortObject = {...sortObject, [sortBy]: sortType}
    
    //ƒê·∫øm t·ªïng s·ªë record hi·ªán c√≥ c·ªßa collection Product
    const count = await Customer.countDocuments();

    //L·∫•y danh s√°ch kh·ªõp v·ªõi ƒëi·ªÅu ki·ªán c·∫ßn l·∫•y
    const customers = await Customer
    .find({})
    .select('-__v')
    .sort(sortObject)
    .skip((currentPage - 1) * pageSize)
    .limit(pageSize)

    //S·ªë ph·∫ßn t·ª≠ kh·ªõp v·ªõi ƒëi·ªÅu ki·ªán l·ªçc ƒë∆∞·ª£c
    const filteredCount = customers.length;

    return {
        limit: pageSize,// s·ªë l∆∞·ª£ng item tr√™n 1 trang
        page: currentPage, //trang hi·ªán t·∫°i
        totalPages: Math.ceil(count / pageSize), //t·ªïng s·ªë trang
        totalItems: count, //t·ªïng s·ªë records
        filteredCount, //s·ªë record kh·ªõp ƒëi·ªÅu ki·ªán
        sortBy: sortObject,
        customers: customers
    }
}

const getCustomerById  = async (id:string)=>{
    //SELECT * FROM customers WHERE _id = id
    const result = await Customer.findById(id);

    if(!result){
        throw createError(404,'Customer not found');
    }
    return result;
}

const findCustomer  = async (email:string, phone: string)=>{
    const result = await Customer.findOne({ $or: [{ email: email }, { phone: phone }] });
    return result;
}

const createCustomer = async (data: ICustomer)=>{
    console.log('<<=== üöÄ  createCustomer ===>>',data);
    const result = await Customer.create(data)
    return result;
}

const updateCustomer = async (id: string,payload: ICustomer)=>{
    /* T·∫≠n d√πng h√†m c√≥ s·∫≥n ƒë·ªÉ t√¨m xem danh m·ª•c c√≥ t·ªìn t·∫°i ch∆∞a */
    const customer = await getCustomerById(id);

    /**
     * D√πng assign ƒë·ªÉ merge gi·ªØa c≈© v√† m·ªõi l·∫°i v·ªõi nhau
     * Sau ƒë√≥ save l·∫°i
     * Mu·ªën update tr∆∞·ªùng n√†o th√¨ ch·ªâ c·∫ßn update tr∆∞·ªùng ƒë√≥
     */
    Object.assign(customer, payload);
    await customer.save();

    return customer
}

const deleteCustomer = async (id:string)=>{
   
    // const customer = await Customer.findByIdAndDelete(id);
    /* T·∫≠n d√πng h√†m c√≥ s·∫≥n ƒë·ªÉ t√¨m xem danh m·ª•c c√≥ t·ªìn t·∫°i ch∆∞a */
    const customer = await getCustomerById(id);
    await Customer.deleteOne({ _id: customer._id });
    return customer
}

export default {
    getAll,
    getCustomerById,
    createCustomer,
    updateCustomer,
    deleteCustomer,
    findCustomer
}