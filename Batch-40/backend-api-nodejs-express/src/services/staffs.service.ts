import createError from 'http-errors';
import Staff from '../models/staff.model';

const getAll = async (query: any) => {

  const { page = 1, limit = 10 } = query;

  //N·∫øu t·ªìn t·∫°i sortType v√† sortBy th√¨ s·∫Ω s·∫Øp x·∫øp theo sortType v√† sortBy
    //N·∫øu kh√¥ng t·ªìn t·∫°i th√¨ s·∫Ω s·∫Øp x·∫øp theo createdAt
    let sortObject = {};
    const sortType = query.sort_type || 'desc';
    const sortBy = query.sort_by || 'createdAt';
    sortObject = { ...sortObject, [sortBy]: sortType === 'desc' ? -1 : 1 };

    console.log('<<=== üöÄsortObject  ===>>',sortObject);

    //T√¨m ki·∫øm theo ƒëi·ªÅu ki·ªán
    let where = {};
    //N·∫øu c√≥ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (query.staff_name && query.staff_name.length > 0) {
        where = { ...where, staff_name: { $regex: query.staff_name, $options: 'i' } };
    }
    //N·∫øu t√¨m ki·∫øm theo danh m·ª•c
    if (query.staff && query.staff.length > 0) {
        where = { ...where, staff: query.staff };
    }

  const staffs = await Staff
  .find(where)
  .skip((page - 1) * limit)
  .limit(limit)
  .sort({...sortObject});

  //ƒê·∫øm t·ªïng s·ªë record hi·ªán c√≥ c·ªßa collection Staff
  const count = await Staff.countDocuments(where);
  
  return {
    staffs,
    pagination:{
        totalRecord: count,
        limit,
        page
    }
  };
};

const getById = async(id: string) => {
    const staff = await Staff.findById(id);
    if (!staff) {
        throw createError(400, 'Staff not found');
    }
    return staff;
}
const create = async(payload: any) => {
    //Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const staffExist = await Staff.findOne({
        email: payload.email
    })
    if (staffExist) {
        throw createError(400, 'Email already exists');
    }
   
    console.log('<<=== üöÄ payload ===>>',payload);
    const staff = new Staff(payload);
    await staff.save();
    return staff;
}

const updateById = async(id: string, payload: any) => {
    //Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng v·ªõi id
    const staff = await getById(id);

    //ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng
    const staffExist = await Staff.findOne({
        email: payload.email,
        _id: { $ne: id }
    })
    if (staffExist) {
        throw createError(400, 'Email already exists');
    }

    Object.assign(staff, payload); //tr·ªôn d·ªØ li·ªáu c≈© v√† m·ªõi
    await staff.save();
    return staff;
}

const deleteById = async(id: string) => {
    //Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng v·ªõi id
    const staff = await getById(id);
    //x√≥a s·∫£n ph·∫©m
    await Staff.deleteOne({ _id: staff._id });
    return staff;
}

export default {
    getAll,
    getById,
    create,
    updateById,
    deleteById
}