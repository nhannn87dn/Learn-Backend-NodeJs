import createError from 'http-errors';
import Category from '../models/category.model';
import { buildSlug } from '../helpers/slugify.helper';

const getAll = async (query: any) => {

  const { page = 1, limit = 10 } = query;

  //N·∫øu t·ªìn t·∫°i sortType v√† sortBy th√¨ s·∫Ω s·∫Øp x·∫øp theo sortType v√† sortBy
    //N·∫øu kh√¥ng t·ªìn t·∫°i th√¨ s·∫Ω s·∫Øp x·∫øp theo createdAt
    let sortObject = {};
    const sortType = query.sort_type || 'desc';
    const sortBy = query.sort_by || 'createdAt';
    sortObject = { ...sortObject, [sortBy]: sortType === 'desc' ? -1 : 1 };

    console.log('<<=== üöÄsortObject  ===>>',sortObject);

    //T√¨m ki·∫øm theo ƒëi·ªÅu ki·ªán
    let where = {};
    //N·∫øu c√≥ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (query.category_name && query.category_name.length > 0) {
        where = { ...where, category_name: { $regex: query.category_name, $options: 'i' } };
    }
    //N·∫øu t√¨m ki·∫øm theo danh m·ª•c
    if (query.category && query.category.length > 0) {
        where = { ...where, category: query.category };
    }

  const categories = await Category
  .find(where)
  .skip((page - 1) * limit)
  .limit(limit)
  .sort({...sortObject});

  //ƒê·∫øm t·ªïng s·ªë record hi·ªán c√≥ c·ªßa collection Category
  const count = await Category.countDocuments(where);
  
  return {
    categories,
    pagination:{
        totalRecord: count,
        limit,
        page
    }
  };
};

const getById = async(id: string) => {
    const category = await Category.findById(id);
    if (!category) {
        throw createError(400, 'Category not found');
    }
    return category;
}
const create = async(payload: any) => {
    //Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i s·∫£n ph·∫©m c√≥ t√™n gi·ªëng nhau kh√¥ng
    const categoryExist = await Category.findOne({ category_name: payload.category_name });
    if (categoryExist) {
        throw createError(400, 'Category already exists');
    }

    //T·∫°o m·ªõi s·∫£n ph·∫©m
    /**
     * N√™n chi ti·∫øt c√°c tr∆∞·ªùng ra
     * ƒë·ªÉ tr√°nh client g·ª≠i l√™n v√† 
     * l∆∞u tr·ªØ d·ªØ li·ªáu kh√¥ng mong mu·ªën
     */

    console.log('<<=== üöÄ payload ===>>',payload);
    const category = new Category({
        category_name: payload.category_name,
        description: payload.description,
        slug: buildSlug(payload.category_name)
    });
    await category.save();
    return category;
}

const updateById = async(id: string, payload: any) => {
    //Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng v·ªõi id
    const category = await getById(id);

    /***
     * Ki·ªÉm tra xem t√™n s·∫£n ph·∫©m b·∫°n v·ª´a ƒë·ªïi c√≥ kh√°c v·ªõi t√™n s·∫£n ph·∫©m hi·ªán t·∫°i kh√¥ng
     * N·∫øu kh√°c th√¨ ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o kh√°c c√≥ t√™n gi·ªëng kh√¥ng
     */
    if (payload.category_name !== category.category_name) {
        const categoryExist = await Category.findOne({ category_name: payload.category_name });
        if (categoryExist) {
            throw createError(400, 'Category already exists');
        }
    }
    //c√¢p nh·∫≠t category

    //c·∫≠p nh·∫≠t slug
    if(payload.category_name){
        payload.slug = buildSlug(payload.category_name);
    }

    Object.assign(category, payload); //tr·ªôn d·ªØ li·ªáu c≈© v√† m·ªõi
    await category.save();
    return category;
}

const deleteById = async(id: string) => {
    //Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng v·ªõi id
    const category = await getById(id);
    //x√≥a s·∫£n ph·∫©m
    await Category.deleteOne({ _id: category._id });
    return category;
}

export default {
    getAll,
    getById,
    create,
    updateById,
    deleteById
}