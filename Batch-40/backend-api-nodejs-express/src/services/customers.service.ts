import createError from 'http-errors';
import Customer from '../models/customer.model';
import { TCustomer } from '../types/model';

// L·∫•y t·∫•t c·∫£ record
const getAll = async (query: any)=>{
   /**
     * SELECT findAll* FROM customers
     */
  const customers = await Customer.find();
  //console.log('<<=== üöÄ customers findAll ===>>');
  return customers
}

// T√¨m 1 record theo ID
const getById = async (id: string)=>{
   
    //ƒêi t√¨m 1 c√°i kh·ªõp id
     /**
     * SELECT * FROM customers WHERE id = ''
     */
    const customer = await Customer.findById(id)
    
     /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!customer){
      throw createError(400, 'Customer Not Found')
    }

    return customer
}

const create = async (payload: TCustomer)=>{
  console.log('<<=== üöÄ payload ===>>',payload);

  const customer = await Customer.create(payload)

  console.log('<<=== üöÄ create customer ===>>',customer);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return customer
}

const updateById = async (id: string, payload: TCustomer)=>{
  
    //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
    const customer = await Customer.findByIdAndUpdate(id, payload, {
      new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
    })
    console.log('<<=== üöÄ customer ===>>',customer);

    /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!customer){
      throw createError(400, 'Customer Not Found')
    }
    
    //Return v·ªÅ record v·ª´a ƒëc update
    return customer
}

const deleteById = async (id: string)=>{
  
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i customer c√≥ id
  const customer = await Customer.findByIdAndDelete(id)

  if(!customer){
    throw createError(400, "Customer Not Found")
  }


  //Return v·ªÅ record v·ª´a x√≥a
  return customer
}




export default {
  getAll,
  getById,
  create,
  updateById,
  deleteById,
}