import createError from 'http-errors';
import { categories } from './../../../../Batch-37-38/project-restful-apis/src/seeds/category';
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import fs from "node:fs"
const fileName = './src/databases/categories.json'

type TCategory = {
  id?: number;
  name: string;
  desc?: string;
}

// L·∫•y t·∫•t c·∫£ record
const findAll = ()=>{
  const data = fs.readFileSync(fileName, { encoding: 'utf-8', flag: 'r' });
  console.log('<<=== üöÄ data ===>>',data);
    //convert qua Object
  const categories: TCategory[] = JSON.parse(data)
  return categories
}

// T√¨m 1 record theo ID
const findById = (id:number)=>{
    const categories = findAll()
    //ƒêi t√¨m 1 c√°i kh·ªõp id
    const category = categories.find(c=> c.id === id)
    
     /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!category){
      throw createError(400, 'Category Not Found')
    }

    return category
}

const createRecord = (payload: TCategory)=>{
  //ƒê·ªçc data c≈©
  const categories = findAll();
  //Th√™m ph·∫ßn t·ª≠ m·ªõi v√†o m·∫£ng tr√™n
  const newCategories  = [...categories,payload]
  //Ghi file
  //ghi file
  fs.writeFile(fileName, JSON.stringify(newCategories), function (err) {
      if (err) throw createError(500, 'writeFile error')
      console.log('writeFile success!');
  });

    //tr·∫£ l·∫°i cho client record v·ª´a th√™m m·ªõi
  console.log('<<=== üöÄ payload service ===>>', payload);
  return payload
}

const updateById = (id: number, payload: TCategory)=>{
   //ƒê·ªçc data c≈©
   const categories = findAll();
    //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
    const category = categories.find(c => c.id === parseInt(id))
    console.log('<<=== üöÄ category ===>>',category);

    /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!category){
      throw createError(400, 'Category Not Found')
    }

    //b2: Update
    const updated_cate = categories.map((c)=> {
      if (c.id === id){
          c.name = payload.name
      }
      return c
    })

    //ghi file
    fs.writeFile(fileName, JSON.stringify(updated_cate), function (err) {
        if (err) throw createError(500, 'writeFile error')
        console.log('writeFile success!');
    });

    //Return v·ªÅ record v·ª´a ƒëc update
    return updated_cate
}

const deleteById = (id: number)=>{
  //ƒê·ªçc data c≈©
  const categories = findAll();
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i category c√≥ id
  const category = categories.find(c => c.id === id)

  if(!category){
    throw createError(400, "Category Not Found")
  }

  //b2 N·∫øu t·ªìn t·∫°i th√¨ x√≥a
  const new_category = categories.filter(c=> c.id !== id)

  console.log('<<=== üöÄ new_category ===>>',new_category);

  //ghi l·∫°i file
  //ghi file
  fs.writeFile(fileName, JSON.stringify(new_category), function (err) {
      if (err) throw createError(500, 'writeFile error')
      console.log('writeFile success!');
  });

  //Return v·ªÅ record v·ª´a x√≥a
  return new_category
}


export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById
}