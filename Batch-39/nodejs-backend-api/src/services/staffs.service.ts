import createError from 'http-errors';
// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi Database
import Staff from '../models/staffs.model';
import {TStaff} from '../types/models'
// L·∫•y t·∫•t c·∫£ record
const findAll = async ()=>{
   /**
     * SELECT findAll* FROM staffs
     */
  const staffs = await Staff.find();
  //console.log('<<=== üöÄ staffs findAll ===>>');
  return staffs
}

// T√¨m 1 record theo ID
const findById = async (id: string)=>{
   
    //ƒêi t√¨m 1 c√°i kh·ªõp id
     /**
     * SELECT * FROM staffs WHERE id = ''
     */
    const staff = await Staff.findById(id)
    
     /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!staff){
      throw createError(400, 'Staff Not Found')
    }

    return staff
}

const createRecord = async (payload: TStaff)=>{
  console.log('<<=== üöÄ payload ===>>',payload);

  const staff = await Staff.create(payload)

  console.log('<<=== üöÄ create staff ===>>',staff);

  //Tr·∫£ l·∫°i record v·ª´a th√™m m·ªõi
  return staff
}

const updateById = async (id: string, payload: TStaff)=>{
  
    //b1.Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa danh m·ª•c c√≥ id n√†y
    const staff = await Staff.findByIdAndUpdate(id, payload, {
      new: true, // n√≥ tr·∫£ v·ªÅ record sau khi update
    })
    console.log('<<=== üöÄ staff ===>>',staff);

    /* B·∫Øt l·ªói khi ko t√¨m th·∫•y th√¥ng tin */
    if(!staff){
      throw createError(400, 'Staff Not Found')
    }
    
    //Return v·ªÅ record v·ª´a ƒëc update
    return staff
}

const deleteById = async (id: string)=>{
  
  //b1 Ki·ªÉm tra xem t·ªìn t·∫°i staff c√≥ id
  const staff = await Staff.findByIdAndDelete(id)

  if(!staff){
    throw createError(400, "Staff Not Found")
  }


  //Return v·ªÅ record v·ª´a x√≥a
  return staff
}


export default {
  findAll,
  findById,
  createRecord,
  updateById,
  deleteById
}